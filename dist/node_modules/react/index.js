(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

    const supportSymbol = typeof Symbol === 'function' && Symbol.for;
    const REACT_ELEMENT_TYPE = supportSymbol
        ? Symbol.for('react.element')
        : 0xeac7;

    const ReactElement = function (type, key, ref, props) {
        const element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props
        };
        return element;
    };
    const jsxDEV = (type, config) => {
        let key = null;
        const props = {};
        let ref = null;
        // 遍历所有属性，获取key, ref, props
        for (const prop in config) {
            const val = config[prop];
            if (prop === 'key') {
                // 没传入key字段的jsx key都是'undefined'
                key = '' + val;
                continue;
            }
            if (prop === 'ref' && val !== undefined) {
                ref = val;
                continue;
            }
            // 过滤原型属性，只保留config自身传入的属性
            if (Object.prototype.hasOwnProperty.call(config, prop)) {
                props[prop] = val;
            }
        }
        return ReactElement(type, key, ref, props);
    };

    // React
    var index = {
        version: '1.0.0',
        createElement: jsxDEV
    };

    return index;

}));
